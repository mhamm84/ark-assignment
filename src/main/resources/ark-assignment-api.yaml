openapi: 3.0.3

info:
  title: Ark Assignment API
  description: API for the Ark Assignment by Mark Hammond
  version: 1.0.0


servers:
  - url: '{protocol}:{host}:{port}'
    variables:
      host:
        enum:
          - 'localhost'
        default: 'localhost'
      port:
        enum:
          - '8080'
        default: '8080'
      protocol:
        enum:
          - 'http'
          - 'https'
        default: 'http'

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

  schemas:

    Client:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        name:
          type: string

    Fund:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        name:
          type: string
        description:
          type: string
        ticker:
          type: string
        balance:
          type: number
          format: double
        investors:
          type: array
          items:
            $ref: '#/components/schemas/Investor'

    Investor:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        name:
          type: string

    Transaction:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        txnType:
          $ref: '#/components/schemas/TransactionType'
        created:
          type: string
          format: date-time
        amount:
          type: number
          format: double
        investorId:
          type: integer
          format: int64

    TransactionType:
      type: string
      enum:
        - CONTRIBUTION
        - INTEREST_INCOME
        - DISTRIBUTION
        - GENERAL_EXPENSE
        - MANAGEMENT_FEE

    TransactionTypeSummary:
      properties:
        txnType:
          $ref: '#/components/schemas/TransactionType'
        total:
          type: number
          format: double

    # Requests

    TransactionRequest:
      type: object
      properties:
        txnType:
          $ref: '#/components/schemas/TransactionType'
        amount:
          type: number
          format: double
          minimum: 0
      required:
        - txnType
        - amount

    NewClientRequest:
      type: object
      properties:
        name:
          type: string
          nullable: false
          minLength: 1

    NewFundRequest:
      type: object
      properties:
        name:
          type: string
          nullable: false
          minLength: 1
        description:
          type: string
          nullable: false
          minLength: 1
        ticker:
          type: string
          nullable: false
          minLength: 3
        balance:
          type: number
          nullable: false
          format: double

    NewInvestorRequest:
      type: object
      properties:
        name:
          type: string
          nullable: false
          minLength: 1

    FundSummaryResponse:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        summaries:
          type: array
          items:
            $ref: '#/components/schemas/TransactionTypeSummary'

    ApiError:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        code:
          type: string
          minLength: 1
        message:
          type: string
      required:
        - timestamp
        - code
        - message

  #Responses
  responses:
    BadRequest:
      description: The resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    NotFound:
      description: The resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Forbidden:
      description: Forbidden action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

#PATHS
paths:

  /admin/client:
    post:
      summary: Create a new Client'
      security:
        - BasicAuth: []
      operationId: createNewClient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewClientRequest'
      responses:
        '201':
          description: Transaction successfully applied
          headers:
            Location:
              schema:
                type: string
              description: URL of the applied transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/client/{clientId}:
    get:
      summary: Get a client by id
      security:
        - BasicAuth: [ ]
      operationId: getClient
      parameters:
        - name: clientId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /client/{clientId}/fund:
    post:
      summary: Create a new fund for a client
      security:
        - BasicAuth: []
      operationId: createNewFund
      parameters:
        - name: clientId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewFundRequest'
      responses:
        '201':
          description: Fund successfully created
          headers:
            Location:
              schema:
                type: string
              description: URL of the fund resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fund'

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /client/{clientId}/fund/{fundId}:
    get:
      summary: Gets a Fund
      security:
        - BasicAuth: [ ]
      operationId: getFund
      parameters:
        - name: clientId
          in: path
          schema:
            type: integer
            format: int64
          required: true
        - name: fundId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fund'

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /client/{clientId}/investor:
    post:
      summary: Create a new investor for a client
      security:
        - BasicAuth: [ ]
      operationId: createNewInvestor
      parameters:
        - name: clientId
          in: path
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewInvestorRequest'
      responses:
        '201':
          description: Investor successfully created
          headers:
            Location:
              schema:
                type: string
              description: URL of the investor resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Investor'

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    get:
      summary: Gets a Transaction by id
      security:
        - BasicAuth: [ ]
      operationId: getTransaction
      parameters:
        - in: path
          name: clientId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /client/{clientId}/fund/{fundId}/investor/{investorId}:
    post:
      summary: Add an investor to a fund
      security:
        - BasicAuth: [ ]
      operationId: addInvestorToFund
      parameters:
        - in: path
          name: clientId
          schema:
            type: integer
            format: int64
          required: true
        - in: path
          name: fundId
          schema:
            type: integer
            format: int64
          required: true
        - in: path
          name: investorId
          schema:
            type: integer
            format: int64
          required: true

      responses:
        '200':
          description: Transaction successfully applied
          headers:
            Location:
              schema:
                type: string
              description: URL of the applied transaction

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /client/{clientId}/fund/{fundId}/investor/{investorId}/transaction:
    post:
      summary: Apply a Transaction from an investor to a fund
      security:
        - BasicAuth: [ ]
      operationId: applyTransaction
      parameters:
        - in: path
          name: clientId
          schema:
            type: integer
            format: int64
          required: true
        - in: path
          name: fundId
          schema:
            type: integer
            format: int64
          required: true
        - in: path
          name: investorId
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'

      responses:
        '200':
          description: Transaction successfully applied
          headers:
            Location:
              schema:
                type: string
              description: URL of the applied transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /client/{clientId}/fund/{fundId}/investor/{investorId}/transaction/{txnId}:
    get:
      summary: Get a Transaction applied to a fund by an investor
      security:
        - BasicAuth: [ ]
      operationId: get Transaction
      parameters:
        - in: path
          name: clientId
          schema:
            type: integer
            format: int64
          required: true
        - in: path
          name: fundId
          schema:
            type: integer
            format: int64
          required: true
        - in: path
          name: investorId
          schema:
            type: integer
            format: int64
          required: true
        - in: path
          name: txnId
          schema:
            type: integer
            format: int64
          required: true

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /client/{clientId}/fund/{fundId}/investor/{investorId}/report:
    get:
      summary: Get report for investor, for fund
      security:
        - BasicAuth: [ ]
      operationId: investorFundReport
      parameters:
        - name: clientId
          in: path
          schema:
            type: integer
            format: int64
          required: true
        - name: fundId
          in: path
          schema:
            type: integer
            format: int64
          required: true
        - name: investorId
          in: path
          schema:
            type: integer
            format: int64
          required: true
        - name: start
          in: query
          schema:
            type: string
            format: date
        - name: end
          in: query
          schema:
            type: string
            format: date
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/TransactionType'

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FundSummaryResponse'

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /client/{clientId}/fund/{fundId}/report:
    get:
      summary: Get reporting for a fund
      security:
        - BasicAuth: [ ]
      operationId: fundReport
      parameters:
        - name: clientId
          in: path
          schema:
            type: integer
            format: int64
          required: true
        - name: fundId
          in: path
          schema:
            type: integer
            format: int64
          required: true
        - name: start
          in: query
          schema:
            type: string
            format: date
        - name: end
          in: query
          schema:
            type: string
            format: date
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/TransactionType'

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FundSummaryResponse'

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'